/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MystikoTBridgeProxyInterface extends utils.Interface {
  contractName: 'MystikoTBridgeProxy';
  functions: {
    'addExecutorWhitelist(address)': FunctionFragment;
    'addRegisterWhitelist(address)': FunctionFragment;
    'changeOperator(address)': FunctionFragment;
    'crossChainSyncTx(uint64,address,address,address,bytes)': FunctionFragment;
    'removeExecutorWhitelist(address)': FunctionFragment;
    'removeRegisterWhitelist(address)': FunctionFragment;
    'sendMessage(address,uint64,bytes)': FunctionFragment;
    'withdraw(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addExecutorWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'addRegisterWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'changeOperator', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'crossChainSyncTx',
    values: [BigNumberish, string, string, string, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'removeExecutorWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'removeRegisterWhitelist', values: [string]): string;
  encodeFunctionData(functionFragment: 'sendMessage', values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'withdraw', values: [string]): string;

  decodeFunctionResult(functionFragment: 'addExecutorWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRegisterWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'crossChainSyncTx', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeExecutorWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRegisterWhitelist', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result;

  events: {
    'TBridgeCrossChainMessage(address,uint256,address,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'TBridgeCrossChainMessage'): EventFragment;
}

export type TBridgeCrossChainMessageEvent = TypedEvent<
  [string, BigNumber, string, string],
  {
    toContract: string;
    toChainId: BigNumber;
    fromContract: string;
    message: string;
  }
>;

export type TBridgeCrossChainMessageEventFilter = TypedEventFilter<TBridgeCrossChainMessageEvent>;

export interface MystikoTBridgeProxy extends BaseContract {
  contractName: 'MystikoTBridgeProxy';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoTBridgeProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addExecutorWhitelist(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addRegisterWhitelist(
      _register: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    changeOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    crossChainSyncTx(
      _fromChainId: BigNumberish,
      _fromContract: string,
      _toContract: string,
      _executor: string,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeExecutorWhitelist(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeRegisterWhitelist(
      _register: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sendMessage(
      _toContract: string,
      _toChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    withdraw(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  addExecutorWhitelist(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addRegisterWhitelist(
    _register: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  changeOperator(
    _newOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  crossChainSyncTx(
    _fromChainId: BigNumberish,
    _fromContract: string,
    _toContract: string,
    _executor: string,
    _message: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeExecutorWhitelist(
    _executor: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeRegisterWhitelist(
    _register: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sendMessage(
    _toContract: string,
    _toChainId: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  withdraw(
    _recipient: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addExecutorWhitelist(_executor: string, overrides?: CallOverrides): Promise<void>;

    addRegisterWhitelist(_register: string, overrides?: CallOverrides): Promise<void>;

    changeOperator(_newOperator: string, overrides?: CallOverrides): Promise<void>;

    crossChainSyncTx(
      _fromChainId: BigNumberish,
      _fromContract: string,
      _toContract: string,
      _executor: string,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    removeExecutorWhitelist(_executor: string, overrides?: CallOverrides): Promise<void>;

    removeRegisterWhitelist(_register: string, overrides?: CallOverrides): Promise<void>;

    sendMessage(
      _toContract: string,
      _toChainId: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    withdraw(_recipient: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'TBridgeCrossChainMessage(address,uint256,address,bytes)'(
      toContract?: null,
      toChainId?: null,
      fromContract?: null,
      message?: null,
    ): TBridgeCrossChainMessageEventFilter;
    TBridgeCrossChainMessage(
      toContract?: null,
      toChainId?: null,
      fromContract?: null,
      message?: null,
    ): TBridgeCrossChainMessageEventFilter;
  };

  estimateGas: {
    addExecutorWhitelist(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addRegisterWhitelist(
      _register: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    changeOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    crossChainSyncTx(
      _fromChainId: BigNumberish,
      _fromContract: string,
      _toContract: string,
      _executor: string,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeExecutorWhitelist(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    removeRegisterWhitelist(
      _register: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sendMessage(
      _toContract: string,
      _toChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    withdraw(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addExecutorWhitelist(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addRegisterWhitelist(
      _register: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    changeOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    crossChainSyncTx(
      _fromChainId: BigNumberish,
      _fromContract: string,
      _toContract: string,
      _executor: string,
      _message: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeExecutorWhitelist(
      _executor: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeRegisterWhitelist(
      _register: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sendMessage(
      _toContract: string,
      _toChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    withdraw(
      _recipient: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
