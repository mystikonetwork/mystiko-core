/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MystikoTBridgeProxy, MystikoTBridgeProxyInterface } from '../MystikoTBridgeProxy';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'toContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'fromContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'TBridgeCrossChainMessage',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'addExecutorWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newOperator',
        type: 'address',
      },
    ],
    name: 'changeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: '_fromChainId',
        type: 'uint64',
      },
      {
        internalType: 'address',
        name: '_fromContract',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'crossChainSyncTx',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    name: 'executorWhitelist',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'operator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'removeExecutorWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'uint64',
        name: '_toChainId',
        type: 'uint64',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'sendMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50600080546001600160a01b031916331790556108a9806100326000396000f3fe60806040526004361061007b5760003560e01c8063919c1df51161004e578063919c1df514610132578063a071e9b114610152578063c81739cd14610172578063d15209481461018557600080fd5b806306394c9b1461008057806351cff8d9146100a257806354ba7696146100b5578063570ca735146100fa575b600080fd5b34801561008c57600080fd5b506100a061009b3660046105b3565b6101a5565b005b6100a06100b03660046105b3565b61022f565b3480156100c157600080fd5b506100e56100d03660046105b3565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561010657600080fd5b5060005461011a906001600160a01b031681565b6040516001600160a01b0390911681526020016100f1565b34801561013e57600080fd5b506100e561014d3660046106c9565b610321565b34801561015e57600080fd5b506100a061016d3660046105b3565b61045f565b6100a06101803660046105d5565b6104d1565b34801561019157600080fd5b506100a06101a03660046105b3565b610513565b6000546001600160a01b031633146101f55760405162461bcd60e51b815260206004820152600e60248201526d27b7363c9037b832b930ba37b91760911b60448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b6000546001600160a01b0316331461027a5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c9037b832b930ba37b91760911b60448201526064016101ec565b6000816001600160a01b03164760405160006040518083038185875af1925050503d80600081146102c7576040519150601f19603f3d011682016040523d82523d6000602084013e6102cc565b606091505b505090508061031d5760405162461bcd60e51b815260206004820152600f60248201527f7769746864726177206661696c6564000000000000000000000000000000000060448201526064016101ec565b5050565b3360009081526001602052604081205460ff166103805760405162461bcd60e51b815260206004820152601a60248201527f4f6e6c792077686974656c6973746564206578656375746f722e00000000000060448201526064016101ec565b60405163105a439b60e31b81526001600160a01b038616906382d21cd8906103b4908a908a90889088908b90600401610800565b602060405180830381600087803b1580156103ce57600080fd5b505af11580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040691906106a7565b6104525760405162461bcd60e51b815260206004820152601b60248201527f63616c6c2063726f7373436861696e53796e635478206572726f72000000000060448201526064016101ec565b5060019695505050505050565b6000546001600160a01b031633146104aa5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c9037b832b930ba37b91760911b60448201526064016101ec565b6001600160a01b03166000908152600160208190526040909120805460ff19169091179055565b7fd80857a183b2092f9e8ac431b7677da383dab7002c167fd82e6b3172ab86e8d883833384604051610506949392919061077d565b60405180910390a1505050565b6000546001600160a01b0316331461055e5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c9037b832b930ba37b91760911b60448201526064016101ec565b6001600160a01b03166000908152600160205260409020805460ff19169055565b80356001600160a01b038116811461059657600080fd5b919050565b803567ffffffffffffffff8116811461059657600080fd5b6000602082840312156105c557600080fd5b6105ce8261057f565b9392505050565b6000806000606084860312156105ea57600080fd5b6105f38461057f565b92506106016020850161059b565b9150604084013567ffffffffffffffff8082111561061e57600080fd5b818601915086601f83011261063257600080fd5b8135818111156106445761064461085d565b604051601f8201601f19908116603f0116810190838211818310171561066c5761066c61085d565b8160405282815289602084870101111561068557600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b6000602082840312156106b957600080fd5b815180151581146105ce57600080fd5b60008060008060008060a087890312156106e257600080fd5b6106eb8761059b565b95506106f96020880161057f565b94506107076040880161057f565b93506107156060880161057f565b9250608087013567ffffffffffffffff8082111561073257600080fd5b818901915089601f83011261074657600080fd5b81358181111561075557600080fd5b8a602082850101111561076757600080fd5b6020830194508093505050509295509295509295565b60006001600160a01b038087168352602067ffffffffffffffff8716818501528186166040850152608060608501528451915081608085015260005b828110156107d55785810182015185820160a0015281016107b9565b828111156107e757600060a084870101525b5050601f01601f19169190910160a00195945050505050565b67ffffffffffffffff8616815260006001600160a01b03808716602084015260806040840152846080840152848660a0850137600083860160a0908101919091529316606083015250601f909201601f1916909101019392505050565b634e487b7160e01b600052604160045260246000fdfea26469706673582212206f7a1984ef22077933950c3f31a30bb97d4822463bac1d061efa3bbffcfba61a64736f6c63430008070033';

type MystikoTBridgeProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MystikoTBridgeProxyConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MystikoTBridgeProxy__factory extends ContractFactory {
  constructor(...args: MystikoTBridgeProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MystikoTBridgeProxy';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MystikoTBridgeProxy> {
    return super.deploy(overrides || {}) as Promise<MystikoTBridgeProxy>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MystikoTBridgeProxy {
    return super.attach(address) as MystikoTBridgeProxy;
  }
  connect(signer: Signer): MystikoTBridgeProxy__factory {
    return super.connect(signer) as MystikoTBridgeProxy__factory;
  }
  static readonly contractName: 'MystikoTBridgeProxy';
  public readonly contractName: 'MystikoTBridgeProxy';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MystikoTBridgeProxyInterface {
    return new utils.Interface(_abi) as MystikoTBridgeProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoTBridgeProxy {
    return new Contract(address, _abi, signerOrProvider) as MystikoTBridgeProxy;
  }
}
