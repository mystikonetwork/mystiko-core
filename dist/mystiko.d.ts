/** Declaration file generated by dts-gen */

export = mystiko;

declare const mystiko: {
    mystiko: {
        chain: {
            createContract: any;
            validContractConfig: any;
        };
        config: {
            AssetType: {
                ERC20: string;
                MAIN: string;
            };
            BaseConfig: any;
            BridgeType: {
                LOOP: string;
                POLY: string;
            };
            ChainConfig: any;
            ContractConfig: any;
            MystikoConfig: any;
            isValidAssetType: any;
            isValidBridgeType: any;
            readFromFile: any;
        };
        db: {
            createDatabase: any;
        };
        handler: {
            AccountHandler: any;
            DepositHandler: any;
            Handler: any;
            WalletHandler: any;
        };
        model: {
            Account: any;
            BaseModel: any;
            Deposit: any;
            DepositStatus: {
                BRIDGE_FAILED: string;
                BRIDGE_PENDING: string;
                BRIDGE_SUCCEEDED: string;
                DST_FAILED: string;
                DST_PENDING: string;
                DST_SUCCEEDED: string;
                INIT: string;
                SRC_FAILED: string;
                SRC_PENDING: string;
                SRC_SUCCEEDED: string;
            };
            ID_KEY: string;
            OffchainNote: any;
            PrivateNote: any;
            PrivateNoteStatus: {
                IMPORTED: string;
                SPENDING: string;
                SPENT: string;
            };
            Wallet: any;
            Withdraw: any;
            WithdrawStatus: {
                FAILED: string;
                INIT: string;
                PENDING: string;
                SUCCEEDED: string;
            };
            isValidDepositStatus: any;
            isValidPrivateNoteStatus: any;
            isValidWithdrawStatus: any;
        };
        protocol: {
            ENCRYPT_PK_SIZE: number;
            ENCRYPT_SK_SIZE: number;
            FIELD_SIZE: {
                abs: any;
                add: any;
                addn: any;
                and: any;
                andln: any;
                bincn: any;
                bitLength: any;
                byteLength: any;
                clone: any;
                cmp: any;
                cmpn: any;
                copy: any;
                div: any;
                divRound: any;
                divmod: any;
                divn: any;
                egcd: any;
                eq: any;
                eqn: any;
                forceRed: any;
                fromRed: any;
                fromTwos: any;
                gcd: any;
                gt: any;
                gte: any;
                gten: any;
                gtn: any;
                iabs: any;
                iadd: any;
                iaddn: any;
                iand: any;
                idivn: any;
                imaskn: any;
                imul: any;
                imuln: any;
                ineg: any;
                inotn: any;
                invm: any;
                ior: any;
                isEven: any;
                isNeg: any;
                isOdd: any;
                isZero: any;
                ishln: any;
                ishrn: any;
                isqr: any;
                isub: any;
                isubn: any;
                iuand: any;
                iuor: any;
                iushln: any;
                iushrn: any;
                iuxor: any;
                ixor: any;
                length: number;
                lt: any;
                lte: any;
                lten: any;
                ltn: any;
                maskn: any;
                mod: any;
                modn: any;
                modrn: any;
                mul: any;
                mulTo: any;
                mulf: any;
                muln: any;
                neg: any;
                negative: number;
                notn: any;
                or: any;
                pow: any;
                red: any;
                redAdd: any;
                redIAdd: any;
                redIMul: any;
                redISqr: any;
                redISub: any;
                redInvm: any;
                redMul: any;
                redNeg: any;
                redPow: any;
                redShl: any;
                redSqr: any;
                redSqrt: any;
                redSub: any;
                setn: any;
                shln: any;
                shrn: any;
                sqr: any;
                sub: any;
                subn: any;
                testn: any;
                toArray: any;
                toArrayLike: any;
                toBuffer: any;
                toJSON: any;
                toNumber: any;
                toRed: any;
                toString: any;
                toTwos: any;
                uand: any;
                ucmp: any;
                umod: any;
                uor: any;
                ushln: any;
                ushrn: any;
                uxor: any;
                words: number[];
                xor: any;
                zeroBits: any;
            };
            HASH_SIZE: number;
            MERKLE_TREE_LEVELS: number;
            RANDOM_SK_SIZE: number;
            VERIFY_PK_SIZE: number;
            VERIFY_SK_SIZE: number;
            bigIntToBuff: any;
            buffToBigInt: any;
            checkSum: any;
            commitment: any;
            commitmentWithShieldedAddress: any;
            decryptAsymmetric: any;
            decryptSymmetric: any;
            encryptAsymmetric: any;
            encryptSymmetric: any;
            fullPublicKey: any;
            fullSecretKey: any;
            hash: any;
            hash2: any;
            isShieldedAddress: any;
            publicKeyForEncryption: any;
            publicKeyForVerification: any;
            publicKeysFromShieldedAddress: any;
            randomBigInt: any;
            randomBytes: any;
            secretKeyForEncryption: any;
            secretKeyForVerification: any;
            separatedPublicKeys: any;
            separatedSecretKeys: any;
            serialNumber: any;
            shieldedAddress: any;
            zkProve: any;
            zkVerify: any;
        };
        utils: {
            BN_LEN: number;
            bnToFixedBytes: any;
            check: any;
            checkDefined: any;
            checkDefinedAndNotNull: any;
            checkNotNull: any;
            readFile: any;
            readJsonFile: any;
            toBuff: any;
            toDecimals: any;
            toFixedLenHex: any;
            toFixedLenHexNoPrefix: any;
            toHex: any;
            toHexNoPrefix: any;
        };
    };
};

