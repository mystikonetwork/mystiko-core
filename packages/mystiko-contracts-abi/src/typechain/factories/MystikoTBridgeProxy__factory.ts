/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MystikoTBridgeProxy, MystikoTBridgeProxyInterface } from '../MystikoTBridgeProxy';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'toContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'fromContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'TBridgeCrossChainMessage',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newOperator',
        type: 'address',
      },
    ],
    name: 'changeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: '_fromChainId',
        type: 'uint64',
      },
      {
        internalType: 'address',
        name: '_fromContract',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'crossChainSyncTx',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'operator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'uint64',
        name: '_toChainId',
        type: 'uint64',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'sendMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50600080546001600160a01b03191633179055610714806100326000396000f3fe60806040526004361061005a5760003560e01c806351cff8d91161004357806351cff8d9146100b6578063570ca735146100c9578063c81739cd1461010157600080fd5b806306394c9b1461005f5780634969e16b14610081575b600080fd5b34801561006b57600080fd5b5061007f61007a366004610430565b610114565b005b34801561008d57600080fd5b506100a161009c366004610546565b61019e565b60405190151581526020015b60405180910390f35b61007f6100c4366004610430565b6102c8565b3480156100d557600080fd5b506000546100e9906001600160a01b031681565b6040516001600160a01b0390911681526020016100ad565b61007f61010f366004610452565b6103ba565b6000546001600160a01b031633146101645760405162461bcd60e51b815260206004820152600e60248201526d27b7363c9037b832b930ba37b91760911b60448201526064015b60405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b600080546001600160a01b031633146101ea5760405162461bcd60e51b815260206004820152600e60248201526d27b7363c9037b832b930ba37b91760911b604482015260640161015b565b60405163105a439b60e31b81526001600160a01b038516906382d21cd89061021e908990899088908890339060040161066b565b602060405180830381600087803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102709190610524565b6102bc5760405162461bcd60e51b815260206004820152601b60248201527f63616c6c2063726f7373436861696e53796e635478206572726f720000000000604482015260640161015b565b50600195945050505050565b6000546001600160a01b031633146103135760405162461bcd60e51b815260206004820152600e60248201526d27b7363c9037b832b930ba37b91760911b604482015260640161015b565b6000816001600160a01b03164760405160006040518083038185875af1925050503d8060008114610360576040519150601f19603f3d011682016040523d82523d6000602084013e610365565b606091505b50509050806103b65760405162461bcd60e51b815260206004820152600f60248201527f7769746864726177206661696c65640000000000000000000000000000000000604482015260640161015b565b5050565b7fd80857a183b2092f9e8ac431b7677da383dab7002c167fd82e6b3172ab86e8d8838333846040516103ef94939291906105e8565b60405180910390a1505050565b80356001600160a01b038116811461041357600080fd5b919050565b803567ffffffffffffffff8116811461041357600080fd5b60006020828403121561044257600080fd5b61044b826103fc565b9392505050565b60008060006060848603121561046757600080fd5b610470846103fc565b925061047e60208501610418565b9150604084013567ffffffffffffffff8082111561049b57600080fd5b818601915086601f8301126104af57600080fd5b8135818111156104c1576104c16106c8565b604051601f8201601f19908116603f011681019083821181831017156104e9576104e96106c8565b8160405282815289602084870101111561050257600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561053657600080fd5b8151801515811461044b57600080fd5b60008060008060006080868803121561055e57600080fd5b61056786610418565b9450610575602087016103fc565b9350610583604087016103fc565b9250606086013567ffffffffffffffff808211156105a057600080fd5b818801915088601f8301126105b457600080fd5b8135818111156105c357600080fd5b8960208285010111156105d557600080fd5b9699959850939650602001949392505050565b60006001600160a01b038087168352602067ffffffffffffffff8716818501528186166040850152608060608501528451915081608085015260005b828110156106405785810182015185820160a001528101610624565b8281111561065257600060a084870101525b5050601f01601f19169190910160a00195945050505050565b67ffffffffffffffff8616815260006001600160a01b03808716602084015260806040840152846080840152848660a0850137600083860160a0908101919091529316606083015250601f909201601f1916909101019392505050565b634e487b7160e01b600052604160045260246000fdfea264697066735822122036793d46f27bedbce46655ebb3a6f8d8e58367af3f8a03737c8c5add95446a3764736f6c63430008070033';

type MystikoTBridgeProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MystikoTBridgeProxyConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MystikoTBridgeProxy__factory extends ContractFactory {
  constructor(...args: MystikoTBridgeProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MystikoTBridgeProxy';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MystikoTBridgeProxy> {
    return super.deploy(overrides || {}) as Promise<MystikoTBridgeProxy>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MystikoTBridgeProxy {
    return super.attach(address) as MystikoTBridgeProxy;
  }
  connect(signer: Signer): MystikoTBridgeProxy__factory {
    return super.connect(signer) as MystikoTBridgeProxy__factory;
  }
  static readonly contractName: 'MystikoTBridgeProxy';
  public readonly contractName: 'MystikoTBridgeProxy';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MystikoTBridgeProxyInterface {
    return new utils.Interface(_abi) as MystikoTBridgeProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoTBridgeProxy {
    return new Contract(address, _abi, signerOrProvider) as MystikoTBridgeProxy;
  }
}
