import { ContractConfig } from '../../src/config';
import { AssetType, BridgeType } from '../../src/model';
import { MystikoABI } from '../../src/chain/abi.js';

test('test ContractConfig constructor', () => {
  expect(() => new ContractConfig()).toThrow();
  const rawConfig = { version: 1 };
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['name'] = 'WrongContractName';
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['name'] = 'MystikoWithLoopMain';
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['address'] = '0xdeadbeef';
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['address'] = '0x7Acfe657cC3eA9066CD748fbEa241cfA138DC879';
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['assetSymbol'] = 'ETH';
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['assetDecimals'] = 18;
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['assetAddress'] = '0xdeadbeef';
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['assetAddress'] = undefined;
  rawConfig['circuits'] = 'circom-1.0';
  const conf1 = new ContractConfig(rawConfig);
  expect(conf1.version).toBe(1);
  expect(conf1.name).toBe('MystikoWithLoopMain');
  expect(conf1.address).toBe('0x7Acfe657cC3eA9066CD748fbEa241cfA138DC879');
  expect(conf1.assetSymbol).toBe('ETH');
  expect(conf1.assetDecimals).toBe(18);
  expect(conf1.assetType).toBe(AssetType.MAIN);
  expect(conf1.assetAddress).toBe(undefined);
  expect(conf1.bridgeType).toBe(BridgeType.LOOP);
  expect(conf1.abi).toBe(MystikoABI.MystikoWithLoopMain.abi);
  expect(conf1.peerChainId).toBe(undefined);
  expect(conf1.peerContractAddress).toBe(undefined);
  expect(conf1.circuits).toBe('circom-1.0');
  rawConfig['name'] = 'MystikoWithPolyERC20';
  rawConfig['peerChainId'] = 10;
  expect(() => new ContractConfig(rawConfig)).toThrow();
  rawConfig['peerContractAddress'] = '0x7Acfe657cC3eA9066CD748fbEa241cfA138DC879';
  rawConfig['assetAddress'] = '0x7826bfec2f7811f20feeb7f294e7f561233e2a2a';
  const conf2 = new ContractConfig(rawConfig);
  expect(conf2.peerChainId).toBe(10);
  expect(conf2.peerContractAddress).toBe('0x7Acfe657cC3eA9066CD748fbEa241cfA138DC879');
  expect(conf2.assetAddress).toBe('0x7826bfec2f7811f20feeb7f294e7f561233e2a2a');
});
