/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MystikoV2WithLoopMain, MystikoV2WithLoopMainInterface } from '../MystikoV2WithLoopMain';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_hasher3',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'FIELD_SIZE',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetType',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'associatedCommitmentPool',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'bridgeType',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newOperator',
        type: 'address',
      },
    ],
    name: 'changeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'commitment',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'hashK',
            type: 'uint256',
          },
          {
            internalType: 'uint128',
            name: 'randomS',
            type: 'uint128',
          },
          {
            internalType: 'bytes',
            name: 'encryptedNote',
            type: 'bytes',
          },
          {
            internalType: 'uint256',
            name: 'rollupFee',
            type: 'uint256',
          },
        ],
        internalType: 'struct IMystikoLoop.DepositRequest',
        name: '_request',
        type: 'tuple',
      },
    ],
    name: 'deposit',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'hasher3',
    outputs: [
      {
        internalType: 'contract IHasher3',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'isDepositsDisabled',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'minAmount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'minRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'operator',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'sanctionsContract',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_commitmentPoolAddress',
        type: 'address',
      },
    ],
    name: 'setAssociatedCommitmentPool',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_minAmount',
        type: 'uint256',
      },
    ],
    name: 'setMinAmount',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_minRollupFee',
        type: 'uint256',
      },
    ],
    name: 'setMinRollupFee',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: '_state',
        type: 'bool',
      },
    ],
    name: 'toggleDeposits',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'bool',
        name: '_check',
        type: 'bool',
      },
    ],
    name: 'updateSanctionCheck',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_sanction',
        type: 'address',
      },
    ],
    name: 'updateSanctionContractAddress',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x6080604052600080546001600160a81b031916740140c57923924b5c5c5455c48d93317139addac8fb17905534801561003757600080fd5b5060405161127438038061127483398101604081905261005691610089565b600580546001600160a01b03199081163317909155600180546001600160a01b03909316929091169190911790556100b9565b60006020828403121561009b57600080fd5b81516001600160a01b03811681146100b257600080fd5b9392505050565b6111ac806100c86000396000f3fe6080604052600436106101295760003560e01c80637cbf0ff6116100a55780639b2cb5d811610074578063ec18d3e211610059578063ec18d3e214610362578063ed6ea33a14610382578063f6afe88f146103b357600080fd5b80639b2cb5d81461032c578063e19abef81461034257600080fd5b80637cbf0ff6146102b6578063897b0637146102d65780639937e147146102f657806399383f781461030c57600080fd5b80633fe3347a116100fc57806353af27d5116100e157806353af27d51461023e578063570ca735146102765780636afdf0481461029657600080fd5b80633fe3347a146101cf578063414a37ba146101fc57600080fd5b806306394c9b1461012e5780632421e155146101505780632994d0e41461018f57806334c33e83146101af575b600080fd5b34801561013a57600080fd5b5061014e610149366004610ebd565b6103c6565b005b34801561015c57600080fd5b5060408051808201909152600481526306c6f6f760e41b60208201525b6040516101869190611090565b60405180910390f35b34801561019b57600080fd5b5061014e6101aa366004610ee6565b610462565b3480156101bb57600080fd5b5061014e6101ca366004610ebd565b6104e8565b3480156101db57600080fd5b5060408051808201909152600481526336b0b4b760e11b6020820152610179565b34801561020857600080fd5b506102307f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b604051908152602001610186565b34801561024a57600080fd5b5060005461025e906001600160a01b031681565b6040516001600160a01b039091168152602001610186565b34801561028257600080fd5b5060055461025e906001600160a01b031681565b3480156102a257600080fd5b5060015461025e906001600160a01b031681565b3480156102c257600080fd5b5061014e6102d1366004610fe0565b61057f565b3480156102e257600080fd5b5061014e6102f1366004610fe0565b61063c565b34801561030257600080fd5b5061023060045481565b34801561031857600080fd5b5061014e610327366004610ee6565b6106a9565b34801561033857600080fd5b5061023060035481565b34801561034e57600080fd5b5061014e61035d366004610ebd565b61072f565b34801561036e57600080fd5b5060025461025e906001600160a01b031681565b34801561038e57600080fd5b506005546103a390600160a01b900460ff1681565b6040519015158152602001610186565b61014e6103c1366004610f20565b6107c6565b6005546001600160a01b031633146104335760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e636044820152643a34b7b71760d91b60648201526084015b60405180910390fd5b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005546001600160a01b031633146104ca5760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e636044820152643a34b7b71760d91b606482015260840161042a565b60008054911515600160a01b0260ff60a01b19909216919091179055565b6005546001600160a01b031633146105505760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e636044820152643a34b7b71760d91b606482015260840161042a565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6005546001600160a01b031633146105e75760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e636044820152643a34b7b71760d91b606482015260840161042a565b600081116106375760405162461bcd60e51b815260206004820152601a60248201527f696e76616c6964206d696e696d616c20726f6c6c757020666565000000000000604482015260640161042a565b600455565b6005546001600160a01b031633146106a45760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e636044820152643a34b7b71760d91b606482015260840161042a565b600355565b6005546001600160a01b031633146107115760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e636044820152643a34b7b71760d91b606482015260840161042a565b60058054911515600160a01b0260ff60a01b19909216919091179055565b6005546001600160a01b031633146107975760405162461bcd60e51b815260206004820152602560248201527f4f6e6c79206f70657261746f722063616e2063616c6c20746869732066756e636044820152643a34b7b71760d91b606482015260840161042a565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600554600160a01b900460ff16156108205760405162461bcd60e51b815260206004820152601560248201527f6465706f73697473206172652064697361626c65640000000000000000000000604482015260640161042a565b600354815110156108735760405162461bcd60e51b815260206004820152600e60248201527f616d6f756e7420746f6f20666577000000000000000000000000000000000000604482015260640161042a565b6004548160a0015110156108c95760405162461bcd60e51b815260206004820152601260248201527f726f6c6c75702066656520746f6f206665770000000000000000000000000000604482015260640161042a565b60006108e28260400151836000015184606001516109ad565b9050808260200151146109375760405162461bcd60e51b815260206004820152601960248201527f636f6d6d69746d656e74206861736820696e636f727265637400000000000000604482015260640161042a565b61094033610b6f565b1561098d5760405162461bcd60e51b815260206004820152601260248201527f73616e6374696f6e656420616464726573730000000000000000000000000000604482015260640161042a565b6109a9826000015183602001518460a001518560800151610c0f565b5050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018410610a2a5760405162461bcd60e51b8152602060048201526024808201527f686173684b2073686f756c64206265206c657373207468616e204649454c445f60448201526353495a4560e01b606482015260840161042a565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018310610abf5760405162461bcd60e51b815260206004820152602660248201527f72616e646f6d532073686f756c64206265206c657373207468616e204649454c60448201527f445f53495a450000000000000000000000000000000000000000000000000000606482015260840161042a565b60015460408051606081018252868152602081018690526fffffffffffffffffffffffffffffffff85168183015290516304b98e1d60e31b81526001600160a01b03909216916325cc70e891610b179160040161105f565b60206040518083038186803b158015610b2f57600080fd5b505afa158015610b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b679190610ff9565b949350505050565b60008054600160a01b900460ff16610b8957506001919050565b60005460405163df592f7d60e01b81526001600160a01b03848116600483015290911690819063df592f7d9060240160206040518083038186803b158015610bd057600080fd5b505afa158015610be4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c089190610f03565b9392505050565b600254610c30906001600160a01b0316610c298487611129565b6000610d2f565b6040805160a081018252858152602081018590526000818301819052606082018590526080820184905260025492516378d60cd760e01b815291926001600160a01b0316916378d60cd791610c8a918591906004016110a3565b602060405180830381600087803b158015610ca457600080fd5b505af1158015610cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cdc9190610f03565b610d285760405162461bcd60e51b815260206004820152601260248201527f63616c6c20656e7175657565206572726f720000000000000000000000000000604482015260640161042a565b5050505050565b610d398183611129565b3414610d875760405162461bcd60e51b815260206004820152601260248201527f696e73756666696369656e7420746f6b656e0000000000000000000000000000604482015260640161042a565b6000836001600160a01b03168360405160006040518083038185875af1925050503d8060008114610dd4576040519150601f19603f3d011682016040523d82523d6000602084013e610dd9565b606091505b5050905080610e2a5760405162461bcd60e51b815260206004820152601660248201527f616d6f756e74207472616e73666572206661696c656400000000000000000000604482015260640161042a565b50505050565b600082601f830112610e4157600080fd5b813567ffffffffffffffff80821115610e5c57610e5c61114f565b604051601f8301601f19908116603f01168101908282118183101715610e8457610e8461114f565b81604052838152866020858801011115610e9d57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215610ecf57600080fd5b81356001600160a01b0381168114610c0857600080fd5b600060208284031215610ef857600080fd5b8135610c0881611165565b600060208284031215610f1557600080fd5b8151610c0881611165565b600060208284031215610f3257600080fd5b813567ffffffffffffffff80821115610f4a57600080fd5b9083019060c08286031215610f5e57600080fd5b610f66611100565b82358152602083013560208201526040830135604082015260608301356fffffffffffffffffffffffffffffffff81168114610fa157600080fd5b6060820152608083013582811115610fb857600080fd5b610fc487828601610e30565b60808301525060a083013560a082015280935050505092915050565b600060208284031215610ff257600080fd5b5035919050565b60006020828403121561100b57600080fd5b5051919050565b6000815180845260005b818110156110385760208185018101518683018201520161101c565b8181111561104a576000602083870101525b50601f01601f19169290920160200192915050565b60608101818360005b6003811015611087578151835260209283019290910190600101611068565b50505092915050565b602081526000610c086020830184611012565b60408152825160408201526020830151606082015260408301516080820152606083015160a08201526000608084015160a060c08401526110e760e0840182611012565b9150506001600160a01b03831660208301529392505050565b60405160c0810167ffffffffffffffff811182821017156111235761112361114f565b60405290565b6000821982111561114a57634e487b7160e01b600052601160045260246000fd5b500190565b634e487b7160e01b600052604160045260246000fd5b801515811461117357600080fd5b5056fea2646970667358221220fa73c3d23db8d0fa11b005a1085a636afbd2acc48227438db55bdacea7d440ef64736f6c63430008070033';

type MystikoV2WithLoopMainConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MystikoV2WithLoopMainConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MystikoV2WithLoopMain__factory extends ContractFactory {
  constructor(...args: MystikoV2WithLoopMainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MystikoV2WithLoopMain';
  }

  deploy(
    _hasher3: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MystikoV2WithLoopMain> {
    return super.deploy(_hasher3, overrides || {}) as Promise<MystikoV2WithLoopMain>;
  }
  getDeployTransaction(
    _hasher3: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_hasher3, overrides || {});
  }
  attach(address: string): MystikoV2WithLoopMain {
    return super.attach(address) as MystikoV2WithLoopMain;
  }
  connect(signer: Signer): MystikoV2WithLoopMain__factory {
    return super.connect(signer) as MystikoV2WithLoopMain__factory;
  }
  static readonly contractName: 'MystikoV2WithLoopMain';
  public readonly contractName: 'MystikoV2WithLoopMain';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MystikoV2WithLoopMainInterface {
    return new utils.Interface(_abi) as MystikoV2WithLoopMainInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoV2WithLoopMain {
    return new Contract(address, _abi, signerOrProvider) as MystikoV2WithLoopMain;
  }
}
