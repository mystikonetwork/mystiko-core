/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction2x2Verifier, Transaction2x2VerifierInterface } from '../Transaction2x2Verifier';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct Transaction2x2Verifier.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50611516806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611307565b610057565b604051901515815260200160405180910390f35b60008151600c146100ae5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420696e707574206c656e677468000000000000000000000000604482015260640160405180910390fd5b6100b882846100ce565b6100c4575060016100c8565b5060005b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100fa610251565b9050806080015151855160016101109190611413565b1461011a57600080fd5b604080518082019091526000808252602082018190525b86518110156101c8578387828151811061014d5761014d6114b4565b60200260200101511061015f57600080fd5b6101b4826101af85608001518460016101789190611413565b81518110610188576101886114b4565b60200260200101518a85815181106101a2576101a26114b4565b6020026020010151610b09565b610b6d565b9150806101c081611461565b915050610131565b506101f18183608001516000815181106101e4576101e46114b4565b6020026020010151610b6d565b90506102358560000151866020015161020984610bc7565b856040015161021b8a60400151610bc7565b6060880151885161022b90610bc7565b8960200151610c66565b61024557600193505050506100c8565b50600095945050505050565b6102596110d1565b6040805180820182527f1579f0d6e2b03848c9770ec60baa47bc6373ec54c23a83d48ae7505921b27e2c81527f10e1d9488a02a0da329f847120643868de0e8d663b50d5c0b12061c33e19eb2c6020808301919091529083528151608080820184527f09e6929eb1ae0c1f0f93e6850e545b8995459abae6780ce4a4a67aa97dc52e508285019081527f2038bbe6857afeda340fc542b5971b0df631ec10a63a00bce5b97eb22e0b9833606080850191909152908352845180860186527f287e3ff156033bff1b20a6ada8175eb1e56438536f173b4082c9c1234c753a8e81527f22a815692d8aa9e9ffdc84bdb5c247cb3eba437a99b8f2deb8280d49688b6689818601528385015285840192909252835180820185527f17f43296924620e0e95d47afa252293d84c6992853af3d79f792106b6590876b8186019081527f21017970ff35c78bf74bcf868181f02a3838785b1d648bf4d143c0f73983cbab828501528152845180860186527f216b9bb324da1cd5c158df6d7c2fd63f14980767c9dde7d94de197dec9d449b281527f21bbbd21043e50cabbd4b1dbadb0efb4a6100eeccf7984933d99449f56054a43818601528185015285850152835190810184527ecd96449d450ed92f452d319080cfa169bbe7dce30a0ff743de53c709a8834d8185019081527f1bfdd14006595e39aa7450d2e82212631aa27ce07a7e9be0fd1b708380f47057828401528152835180850185527f1c43bbab2d862674aaba664816380d6872aa3b8a5c9f62bb769d7dfac3bf829781527f261f57e269b7362af94c6510245f6210e04c5cda8cc1fe5e5d5c239502fec2a28185015281840152908401528151600d8082526101c08201909352919082015b60408051808201909152600080825260208201528152602001906001900390816104d457505060808201908152604080518082019091527f3059e4f20cd752001e886a8d7638b83e7ef905b863ec15094cc9324a4209afc181527f28ec83ec4339699c188253558cb8f7e34776dd1f52137c185016625a3116671a602082015290518051600090610567576105676114b4565b602002602001018190525060405180604001604052807f13757c7b382ae35f27d0d9c9a7c1c94dc5d8e4956fbb50b76498e5791130593881526020017f023cc27cca5b16a578ad71a28769e8985a8b68ee41b3c4c5504212983d3171b881525081608001516001815181106105de576105de6114b4565b602002602001018190525060405180604001604052807f0eead86a69204418a13af7bd1ce3b40dd4b5f1046f4ec9abca7b6f8fb2bb8e3781526020017f16bacc61dd5d2e3b89004b3ae74cce4b0244b4c1a14335f0364a840e3f4a2a1e8152508160800151600281518110610655576106556114b4565b602002602001018190525060405180604001604052807f250cd2d24102622284704edd477980b063595e7436bb29349af2e74fcfef5ebe81526020017f186ca9ffefaaa85e80b40bc67df9d498c87b1da35da4a5bae15f87c0d685efee81525081608001516003815181106106cc576106cc6114b4565b602002602001018190525060405180604001604052807f02c73ed9d0487c74a11f39765b84919c3abe0d9c9357667e46395a0907be328881526020017f1ec142dc7c7783a2e6501040de21e43c133b84104920bb9cee5b03d857eeed818152508160800151600481518110610743576107436114b4565b602002602001018190525060405180604001604052807f2410ed3bb8b59b6d00a16b0bb4cc7504a046a8eebb9537c40fac0072fd5d0fcc81526020017f269ef7f0fa9f3ade9087da19f0aef560278af9970238b54763af06fa14af050a81525081608001516005815181106107ba576107ba6114b4565b602002602001018190525060405180604001604052807f27b48bc5ab806acb3874bcc3f2b8776e9a1cca442093d793e5471c73ecdf860c81526020017f23e5d412dddf62a14fdc4e787ef5308c917b29fc6164bd793170c8eaf9d29d0f8152508160800151600681518110610831576108316114b4565b602002602001018190525060405180604001604052807f12ab3385ddffbaecc11d5b0a21a54061aed9ee4773d77c536ef87514d5ccf6f781526020017f29b3940f11722575520ad2e96ae5182b890cb94478ffb741b4a15c4505b4f78481525081608001516007815181106108a8576108a86114b4565b602002602001018190525060405180604001604052807f02ea88246c3fd30ae75c3727483eba166f841e1cb45702ad11f93b38b12456f481526020017f1951fc93546dd9a90eb5b42554a8d824491dbd8b6be14147d8e6091ccd475542815250816080015160088151811061091f5761091f6114b4565b602002602001018190525060405180604001604052807f01bdad7ac2ad2dede4351ecd7b3a9950f38cb2a02259c5895b908f3c884a671681526020017f0b0109424cf3aa8f4d4b599d6738094c082d0951de5338579b8a59e7ec4cf9158152508160800151600981518110610996576109966114b4565b602002602001018190525060405180604001604052807f2b2a8bbccf700eab274995badfa21a9e70596de7f4cc359f46255d5e242461f181526020017f1a03c79f8b589176591ce5b819060209bfad3c5177719ebcb5c60ae1c473cc348152508160800151600a81518110610a0d57610a0d6114b4565b602002602001018190525060405180604001604052807f2efd836e62d9291dacaa004cf0b42152a44f6e2cc84ae60e1431eb457eb9d7e881526020017f0c5f519784c9ac3794efa076afb0b51a83cf0df0c04767058833a1c3479c02a38152508160800151600b81518110610a8457610a846114b4565b602002602001018190525060405180604001604052807f2b191a706bc4da7409b83bcc974fad4abf5eec57441b0870e883db650ad13cfe81526020017f2d4369fa95e80e89c4f639be4293544c457004cc69362deace5b080479a2c89a8152508160800151600c81518110610afb57610afb6114b4565b602002602001018190525090565b6040805180820190915260008082526020820152610b25611122565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610b5857610b5a565bfe5b5080610b6557600080fd5b505092915050565b6040805180820190915260008082526020820152610b89611140565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610b5857610b5a565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610c0e57506020830151155b15610c2e5750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610c53919061147c565b610c5d908461144a565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610c8157505060408051600480825260a0820190925291925060009190602082015b610ccb61115e565b815260200190600190039081610cc35790505090508a82600081518110610cf457610cf46114b4565b60200260200101819052508882600181518110610d1357610d136114b4565b60200260200101819052508682600281518110610d3257610d326114b4565b60200260200101819052508482600381518110610d5157610d516114b4565b60200260200101819052508981600081518110610d7057610d706114b4565b60200260200101819052508781600181518110610d8f57610d8f6114b4565b60200260200101819052508581600281518110610dae57610dae6114b4565b60200260200101819052508381600381518110610dcd57610dcd6114b4565b6020026020010181905250610de28282610df1565b9b9a5050505050505050505050565b60008151835114610e0157600080fd5b82516000610e1082600661142b565b905060008167ffffffffffffffff811115610e2d57610e2d6114ca565b604051908082528060200260200182016040528015610e56578160200160208202803683370190505b50905060005b8381101561109157868181518110610e7657610e766114b4565b60200260200101516000015182826006610e90919061142b565b610e9b906000611413565b81518110610eab57610eab6114b4565b602002602001018181525050868181518110610ec957610ec96114b4565b60200260200101516020015182826006610ee3919061142b565b610eee906001611413565b81518110610efe57610efe6114b4565b602002602001018181525050858181518110610f1c57610f1c6114b4565b60209081029190910181015151015182610f3783600661142b565b610f42906002611413565b81518110610f5257610f526114b4565b602002602001018181525050858181518110610f7057610f706114b4565b6020908102919091010151515182610f8983600661142b565b610f94906003611413565b81518110610fa457610fa46114b4565b602002602001018181525050858181518110610fc257610fc26114b4565b602002602001015160200151600160028110610fe057610fe06114b4565b602002015182610ff183600661142b565b610ffc906004611413565b8151811061100c5761100c6114b4565b60200260200101818152505085818151811061102a5761102a6114b4565b602002602001015160200151600060028110611048576110486114b4565b60200201518261105983600661142b565b611064906005611413565b81518110611074576110746114b4565b60209081029190910101528061108981611461565b915050610e5c565b5061109a611183565b6000602082602086026020860160086107d05a03fa9050808015610b585750806110c357600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110fb61115e565b815260200161110861115e565b815260200161111561115e565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806111716111a1565b815260200161117e6111a1565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f8301126111d057600080fd5b6111d86113c7565b8083856040860111156111ea57600080fd5b60005b600281101561120c5781358452602093840193909101906001016111ed565b509095945050505050565b600082601f83011261122857600080fd5b8135602067ffffffffffffffff80831115611245576112456114ca565b8260051b604051601f19603f8301168101818110848211171561126a5761126a6114ca565b6040528481528381019250868401828801850189101561128957600080fd5b600092505b858310156112ac57803584529284019260019290920191840161128e565b50979650505050505050565b6000604082840312156112ca57600080fd5b6040516040810181811067ffffffffffffffff821117156112ed576112ed6114ca565b604052823581526020928301359281019290925250919050565b60008082840361012081121561131c57600080fd5b6101008082121561132c57600080fd5b6113346113f0565b61133e87876112b8565b81526080603f198401121561135257600080fd5b61135a6113c7565b925061136987604088016111bf565b835261137887608088016111bf565b60208401528260208201526113908760c088016112b8565b60408201529350840135905067ffffffffffffffff8111156113b157600080fd5b6113bd85828601611217565b9150509250929050565b6040805190810167ffffffffffffffff811182821017156113ea576113ea6114ca565b60405290565b6040516060810167ffffffffffffffff811182821017156113ea576113ea6114ca565b600082198211156114265761142661149e565b500190565b60008160001904831182151516156114455761144561149e565b500290565b60008282101561145c5761145c61149e565b500390565b60006000198214156114755761147561149e565b5060010190565b60008261149957634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a01294a4c7701efcccbe85dad0059c6f1421d2ae883c876a2993ebd2e084d76164736f6c63430008070033';

type Transaction2x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction2x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction2x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction2x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction2x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction2x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction2x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction2x2Verifier {
    return super.attach(address) as Transaction2x2Verifier;
  }
  connect(signer: Signer): Transaction2x2Verifier__factory {
    return super.connect(signer) as Transaction2x2Verifier__factory;
  }
  static readonly contractName: 'Transaction2x2Verifier';
  public readonly contractName: 'Transaction2x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction2x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction2x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction2x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction2x2Verifier;
  }
}
