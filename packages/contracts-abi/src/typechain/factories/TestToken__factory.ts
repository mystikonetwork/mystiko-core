/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { TestToken, TestTokenInterface } from '../TestToken';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: '_decimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162000e7a38038062000e7a8339810160408190526200003491620002f0565b8251839083906200004d90600390602085019062000193565b5080516200006390600490602084019062000193565b50506005805460ff191660ff8416908117909155620000a2915033906200008c90600a620003d9565b6200009c90633b9aca00620004a4565b620000ab565b5050506200052f565b6001600160a01b038216620001065760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200011a919062000375565b90915550506001600160a01b038216600090815260208190526040812080548392906200014990849062000375565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b828054620001a190620004c6565b90600052602060002090601f016020900481019282620001c5576000855562000210565b82601f10620001e057805160ff191683800117855562000210565b8280016001018555821562000210579182015b8281111562000210578251825591602001919060010190620001f3565b506200021e92915062000222565b5090565b5b808211156200021e576000815560010162000223565b600082601f8301126200024b57600080fd5b81516001600160401b038082111562000268576200026862000519565b604051601f8301601f19908116603f0116810190828211818310171562000293576200029362000519565b81604052838152602092508683858801011115620002b057600080fd5b600091505b83821015620002d45785820183015181830184015290820190620002b5565b83821115620002e65760008385830101525b9695505050505050565b6000806000606084860312156200030657600080fd5b83516001600160401b03808211156200031e57600080fd5b6200032c8783880162000239565b945060208601519150808211156200034357600080fd5b50620003528682870162000239565b925050604084015160ff811681146200036a57600080fd5b809150509250925092565b600082198211156200038b576200038b62000503565b500190565b600181815b80851115620003d1578160001904821115620003b557620003b562000503565b80851615620003c357918102915b93841c939080029062000395565b509250929050565b6000620003e78383620003ee565b9392505050565b600082620003ff575060016200049e565b816200040e575060006200049e565b8160018114620004275760028114620004325762000452565b60019150506200049e565b60ff84111562000446576200044662000503565b50506001821b6200049e565b5060208310610133831016604e8410600b841016171562000477575081810a6200049e565b62000483838362000390565b80600019048211156200049a576200049a62000503565b0290505b92915050565b6000816000190483118215151615620004c157620004c162000503565b500290565b600181811c90821680620004db57607f821691505b60208210811415620004fd57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b61093b806200053f6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d71461018d578063a9059cbb146101a0578063dd62ed3e146101b357600080fd5b8063395093511461014957806370a082311461015c57806395d89b411461018557600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101ec565b6040516100e3919061084f565b60405180910390f35b6100ff6100fa366004610825565b61027e565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046107e9565b610296565b60055460405160ff90911681526020016100e3565b6100ff610157366004610825565b6102ba565b61011361016a366004610794565b6001600160a01b031660009081526020819052604090205490565b6100d66102f9565b6100ff61019b366004610825565b610308565b6100ff6101ae366004610825565b6103b7565b6101136101c13660046107b6565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101fb906108ca565b80601f0160208091040260200160405190810160405280929190818152602001828054610227906108ca565b80156102745780601f1061024957610100808354040283529160200191610274565b820191906000526020600020905b81548152906001019060200180831161025757829003601f168201915b5050505050905090565b60003361028c8185856103c5565b5060019392505050565b6000336102a48582856104e9565b6102af85858561057b565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028c90829086906102f49087906108a4565b6103c5565b6060600480546101fb906108ca565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103aa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102af82868684036103c5565b60003361028c81858561057b565b6001600160a01b0383166104275760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103a1565b6001600160a01b0382166104885760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103a1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461057557818110156105685760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103a1565b61057584848484036103c5565b50505050565b6001600160a01b0383166105f75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103a1565b6001600160a01b0382166106595760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103a1565b6001600160a01b038316600090815260208190526040902054818110156106e85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103a1565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061071f9084906108a4565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161076b91815260200190565b60405180910390a3610575565b80356001600160a01b038116811461078f57600080fd5b919050565b6000602082840312156107a657600080fd5b6107af82610778565b9392505050565b600080604083850312156107c957600080fd5b6107d283610778565b91506107e060208401610778565b90509250929050565b6000806000606084860312156107fe57600080fd5b61080784610778565b925061081560208501610778565b9150604084013590509250925092565b6000806040838503121561083857600080fd5b61084183610778565b946020939093013593505050565b600060208083528351808285015260005b8181101561087c57858101830151858201604001528201610860565b8181111561088e576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156108c557634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806108de57607f821691505b602082108114156108ff57634e487b7160e01b600052602260045260246000fd5b5091905056fea264697066735822122025a62165dcadfbb265439139cabdb955cb1dcd97d26f5468a2b6290bd998c10164736f6c63430008070033';

type TestTokenConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: TestTokenConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'TestToken';
  }

  deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<TestToken> {
    return super.deploy(_name, _symbol, _decimals, overrides || {}) as Promise<TestToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, _decimals, overrides || {});
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly contractName: 'TestToken';
  public readonly contractName: 'TestToken';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
